
1. 通过docker下载nginx镜像
2. 运行命令：
docker run -d -p 80:80 --name nginx -v /nginx/static:/usr/share/nginx/static -v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /nginx/logs:/var/log/nginx -v /nginx/conf.d:/etc/nginx/conf.d nginx
3. 复制conf文件到挂载目录
docker cp 容器id:/etc/nginx/nginx.conf /nginx/conf
4. 此时查看nginx.conf,会发现里面有会查询所有conf.d目录下的conf文件： include /etc/nginx/conf.d/*.conf;
5. 进入 conf.d文件夹，创建一个新的conf文件，并编辑内容
 server {
    listen       80;
    server_name 域名;
    location / {
       proxy_pass http://IP:端口;
      }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
    root   /usr/share/nginx/static;
    }
}
6. 重启容器，此时一般http协议的域名已经可以访问到了

7. https协议的域名访问，需要使用证书：首先在创建一个新的证书目录，nginx/cert, 把证书和key放入其中
8. 修改conf文件
server {
    listen       443 ssl;
    server_name 域名;

    ssl_certificate /cert/证书文件.pem; #我这里会在运行docker命令的时候，把cert挂载到放置证书的目录，所以这里使用相对目录就行
    ssl_certificate_key /cert/证书的key.key;

    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;

    location / {
       proxy_pass http://IP:端口;
      }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
    root   /usr/share/nginx/static;
    }
}

9. 运行命令：
docker run -d -p 80:80 -p 443:443 --net java --name nginx -v /nginx/static:/usr/share/nginx/static -v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /nginx/logs:/var/log/nginx -v /nginx/conf.d:/etc/nginx/conf.d -v /nginx/cert:/cert nginx

10. 通过nginx访问静态资源
首先把静态资源放置在/nginx/static目录下面，再更改conf文件增加location
 location /static/{
                root /usr/share/nginx;
        }
 重启nginx,如果在static目录下增加一个test.txt文件，则以如下方式可以访问到
 http://test.com/static/test.txt


11.踩过的坑
 a.通过nginx访问发布的服务时，如果nginx和服务分别指定了不同的网络，则如果配置的proxy_pass的地址为服务容器的ip地址，nginx无法访问到，需要更改为主机ip;如果该端口没有对外开发，则nginx找不到发布的服务。
 b.访问静态资源，配置Location路径的时候，如果配置为/static,nginx在寻找资源会将static拼接起来,如 /usr/share/nginx/static/



