一、常见命令
  1.docker images 查询本地所有镜像
  2.docker ps 查询正在运行的容器
  3.docker ps -a 查询所有的容器
  4.docker stop $containerId 关闭某个容器
  5.docker restart $containerId 重新开始某个容器
  6.docker logs $containerId 查看某个容器的日志
  7.docker search $name 从仓库查询某种类型的镜像，如 docker search redis
  8.docker pull $name 下载指定的镜像，不加tag的话，是默认下载latest版本的镜像
  9.docker exec -it $containerId bash  进入命令控制台
  10.docker network ls 查询docker网络地址
  11.docker network rm $name 删除指定名字的网络
  12.docker network inspect $networkId 查看指定的network
  13.docker network create --subnet=172.22.0.0/16 my_net 创建名为my_net的固定ip
  14.docker network create -d bridge my_net 创建名为my_net的内网ip
  15.docker inspect $containerId |grep IPA 查看指定容器的ip
  16.docker rmi $imageId 删除镜像
  17.docker build -t test/testimage . 创建一个名字为test/testimage，tag为latest的镜像
  18.docker build -t test/testimage:2019 . 创建一个名字为test/testimage，tag为2019的镜像
  
  
二、docker 创建 zookeeper
  1.docker search zookeeper
  2.docker pull zookeeper
  3.docker run -d --restart=always --name zookeeper -p 9181:2181 zookeeper
    -d 在后台运行容器
    --restart=always docker重启后，自动重启zookeeper容器
    --name 指定该容器名
    -p 9181:2181 把容器的端口映射到宿主机的端口
    
三、docker 创建 mysql
   docker run -it --name mysql -p 9306:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      -v /data/mysql:/var/lib/mysql 将镜像里var/lib/mysql里面的数据挂载到data/mysql目录下
      -e MYSQL_ROOT_PASSWORD=root 设置root用户登录密码
      --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 设置编码格式
      
四、docker 创建 redis
  1.docker run -d --name my_redis --net redis_net --ip 172.22.0.9 -p 6684:6379 redis --requirepass "mypassword" 创建指定ip，指定映射端口的redis容器
  2.docker run -d --net redis_net --name my_redis -p 6567:6379 redis 创建指定网络和映射端口的redis容器
  
五、docker 创建redis集群
  方法一：
  1.依次创建3个redis容器 
    docker run -d --name redis_6379 --net redis_net -p 6379:6379 redis
    docker run -d --name redis_6380 --net redis_net -p 6380:6379 redis
    docker run -d --name redis_6381 --net redis_net -p 6381:6379 redis
  2.分别查看三个容器的ip，结果如下
    redis_6381 ：172.22.0.4    
    redis_6380 ：172.22.0.3   
    redis_6379 ：172.22.0.2
  3.选择redis_6379为主，其余两个容器为从节点：分别进入两个从节点的容器bash，运行：redis-cli，再运行命令：SLAVEOF 172.22.0.2 6379。
    再运行：info replication查看：如果显示master_link_status:up，则此时已经建立了主从关系了
    可以进入主容器运行redis-cli，再运行：info replication查看，结果如下：
    # Replication
    role:master
    connected_slaves:2
    slave0:ip=172.22.0.3,port=6379,state=online,offset=98,lag=0
    slave1:ip=172.22.0.4,port=6379,state=online,offset=98,lag=1
  
  方法二：通过挂载目录，可以设置redis密码
  1.分别创建3个容器的挂载目录，redis/redis_master，redis/redis_slave1，redis/redis_slave2
  2.分别在里面创建3个redis.conf文件，其中master的如下：
      logfile "redis.log"
      port 6379
      dir ../data
      appendonly yes
      appendfilename appendonly.aof
      requirepass password
      
    两个slave节点如下：
      logfile "redis.log"
      port 6379
      dir ../data
      appendonly yes
      appendfilename appendonly.aof
      requirepass password
      slaveof 172.22.0.2 6379
      masterauth password
    3.启动三个容器
      docker run -p 6379:6379 --net redis_net -v /redis/redis_master:/data --name redis_6379 -d redis redis-server redis.conf
      docker run -p 6380:6379 --net redis_net -v /redis/redis_slave1:/data --name redis_6380 -d redis redis-server redis.conf
      docker run -p 6381:6379 --net redis_net -v /redis/redis_slave2:/data --name redis_6381 -d redis redis-server redis.conf
    4.哨兵模式
      分别进入主从节点所在的挂载目录，创建sentinel.conf，内容如下：
      logfile "sentinel.log"
      sentinel monitor mymaster 172.22.0.2 6379 1
      sentinel auth-pass mymaster password
    5.分别运行启动命令：
      docker run -p 26379:26379 -v /redis/redis_master/:/data --name redis_26379 -d redis redis-sentinel sentinel.conf
      docker run -p 26380:26379 -v /redis/redis_slave1/:/data --name redis_26380 -d redis redis-sentinel sentinel.conf
      docker run -p 26381:26379 -v /redis/redis_slave2/:/data --name redis_26381 -d redis redis-sentinel sentinel.conf
    6.检查
      进入容器内部，并登录客户端：redis-cli -h 127.0.0.1 -p 26379
      执行命令：info


  
   
